## GRAPHICAL ##
n = 4;
C = [3 2];
A = [2 4
    3 5
    1 0
    0 1];
B = [8
    15
    0
    0];

x2 = zeros(n, 2);
for i = 1 : n
    x1 = [-10 10];
    for j = 1 : 2
        x2(i, j) = (B(i, 1) - (A(i, 1) * x1(1, j))) / A(i, 2);
    end
    plot (x1(1, :),x2(i,:), 'r-');
    hold on;
end
plot([0, 0], [-10, 10], 'r-');    %plot y axis
counter = 0;
for i = 1 : n - 1
    for j = i + 1 : n
        A1 = A(i, :);
        B1 = B(i, :);
        A2 = A(j, :);
        B2 = B(j, :);
        A3(1, :) = A1(1, :);
        A3(2, :) = A2(1, :);
        B3(1, :) = B1(1, :);
        B3(2, :) = B2(1, :);
        counter = counter + 1;
        sol(:, counter) = (inv(A3)) * B3;
    end
    
end
   
disp(sol);
for i = 1:n + 2
    if (((A(1, 1) * sol(1, i)) + (A(1, 2) * sol(2, i))) > B(1, 1))
        sol (:, i) = [0; 0];
    end
        
    if (((A(2, 1) * sol(1, i)) + (A(2, 2) * sol(2, i))) < B(2, 1))
        sol (:, i) = [0; 0];
    end

    if (((A(3, 1) * sol(1, i)) + (A(3, 2) * sol(2, i))) < B(3, 1))
        sol (:, i) = [0; 0];
    end
        
    if (((A(4, 1) * sol(1, i)) + (A(4, 2) * sol(2, i))) < B(4, 1))
        sol (:, i) = [0; 0];
    end

    OBJ(i, 1) = (C(1, 1) * sol(1, i)) + (C(1, 2) * sol(2, i)); 
end

OBJ( all(~OBJ,2), : ) = [];  %eliminates zeros from OBJ ans sol
sol( :, all(~sol,1) ) = [];


if (isempty(sol) == 1)
    fprintf("No feasible solution");

else
    disp(sol);
    disp(OBJ);
    fprintf("The maximum optimal value is %f\n", max(OBJ));
    fprintf("The minimum optimal value is %f", min(OBJ));
end

%plot (x1(1, :),x2(1,:), 'r-');
%hold on;
%plot (x1(1, :),x2(2,:), 'g-');
%hold on;
%plot(x1(1, :), zeros(1, 40), 'b-');
%hold on;
%plot(zeros(1, 40), x1(1, :), 'b-');